1. Servers In The Cloud: Servers in the cloud have revolutionized the IT industry.

	- Scale capacity up and down based on demands.
	- Storage, more memory, and computing power can be added as needed.
	- Obtain servers in minutes.
    - No need for onsite hardware or capital expenses.

2. Elastic Cloud Compute: Elastic Cloud Compute or EC2 is a foundational piece of AWS' cloud computing platform and is a service that provides servers for rent in the cloud.


	- Pricing Options: There are several pricing options for EC2.

		- On Demand - Pay as you go, no contract.
		- Dedicated Hosts - You have your own dedicated hardware and don't share it with others.
		- Spot - You place a bid on an instance price. If there is extra capacity that falls below your bid, an EC2 instance is provisioned. If the price goes above your bid while the instance is running, the instance is terminated.
		- Reserved Instances - You earn huge discounts if you pay up front and sign a 1-year or 3-year contract.

	- Tips
		- EC2 is found under the Compute section of the AWS Management Console.
		- Spot instances can save you up to 90% off the on-demand pricing.
		- There are several instance types that provide varying combinations of CPU, memory, storage, and networking capacity.

3. Elastic Block Store: Elastic Block Store (EBS) is a storage solution for EC2 instances and is a physical hard drive that is attached to the EC2 instance to increase storage.


	- Tips
		- EBS is found on the EC2 Dashboard.
		- There are several EBS volume types that fall under the categories of Solid State Drives (SSD) and Hard Disk Drives (HDD).
		
4. Security: Security in the cloud allows you to have complete control over your virtual networking environment.


	- Configure your virtual network with public or private facing subnets
	- Launch your servers in the selected network to secure access
	
5. Virtual Private Cloud (VPC): Virtual Private Cloud or VPC allows you to create your own private network in the cloud. You can launch services, like EC2, inside of that private network. A VPC spans all the Availability Zones in the region.


	- VPC allows you to control your virtual networking environment, which includes:

		- IP address ranges
		- subnets
		- route tables
		- network gateways

	- Tips
		- VPC is found under Networking & Content Delivery section of the AWS Management Console.
		- The default limit is 5 VPCs per Region. You can request an increase for these limits.
		- Your AWS resources are automatically provisioned in a default VPC.
		- There are no additional charges for creating and using the VPC.
		- You can store data in Amazon S3 and restrict access so that it’s only accessible from instances in your VPC.

6. Compute Power In The Cloud: Compute power in the cloud is a faster way to build applications, providing:


	- no servers to manage (i.e. serverless)
	- ability to continuously scale
	- ability to run code on demand in response to events
	- pay only when your code runs
	
7. Lambda: AWS Lambda provides you with computing power in the cloud by allowing you to execute code without standing up or managing servers.

	- Tips
		- Lambda is found under the Compute section on the AWS Management Console.
		- Lambdas have a time limit of 15 minutes.
		- The code you run on AWS Lambda is called a “Lambda function.”
		- Lambda code can be triggered by other AWS services.
		- AWS Lambda supports Java, Go, PowerShell, Node.js, C#/.NET, Python, and Ruby. There is a Runtime API that allows you to use other programming languages to author your functions.
		- Lambda code can be authored via the console.
		

Lambda lab

Steps:

A). Create a Lambda Function
	- On the AWS Management Console page, type lambda in the Find Services box and then select Lambda.
	- Click the “Create function” button and select Author from scratch.
	- Enter a Function name and select Node.js 8.10 as the runtime.
	- For Permission, click Choose or create an execution role, and select Create a new role with basic Lambda permissions.
	- Click Create function.

B). Modify a Lambda Function
	- Scroll down to the code for the Lambda function.
	- Replace the code on Line 5 with the statement below:
		- body: JSON.stringify('Hello ' + event.key1 + ' from Lambda!'),
	- Click the Save button in the upper right-hand corner.
	- Scroll down to the Basic Settings section.
	- For the Description, enter Udacity Function.
	- Change the Timeout from 3 seconds to 10 minutes.
	- Click the Save button in the upper right-hand corner.

C). Test a Lambda Function

	- Click on the Test button in the upper right-hand corner.
	- Ensure the Event template is Hello World.
	- For the Event name enter TestEvent Important: The name cannot contain spaces.
	- Update the JSON to the statement below, replacing the statement with your name.
	{
	"key1": "Place your name here"
	}
	- Click Create.

	- Click the Test button in the upper right-hand corner again.
	- Scroll up to see the output in the Execution Results pane.
	- Review your results in the window.
	
	
8. Elastic Beanstalk: Elastic Beanstalks is an orchestration service that allows you to deploy a web application at the touch of a button by spinning up (or provisioning) all of the services that you need to run your application.


	- Tips
		- Elastic Beanstalk is found under the Compute section of the AWS Management Console.
		- Elastic Beanstalk can be used to deployed web applications developed with Java, .NET, PHP, Node.js, Python, Ruby, Go, and Docker.
		- You can run your applications in a VPC.
		
Elastic Bean Stalk Lab

Steps:

A) Access Elastic Beanstalk service from AWS Management Console
	- On the AWS Management Console page, type elastic beanstalk in the Find Services box and then select Elastic Beanstalk.
	- If this is your first time accessing Elastic Beanstalk, click the Get started button.
	- Enter an Application name.
	- Under Platform, click the dropdown for Choose a platform. Select Tomcat.
	- Under Application code, select Upload your code. Click the Upload button.
	- Under Upload your code, make sure Local file is selected for Source code origin.
	- Click Choose File and upload the downloaded WAR file (link above in pre-requisites), udacity.war.
	- Click the Upload button.
	- Click the Create application button. Important: It will take about 10 minutes for your application to be created. There are several resources that need to be spun up to support your application. Your application is created once you see a green check mark and the Health of your application is Ok.
	- After the application is created, copy the application’s URL. Important: The URL can be found on the top of the page, to the right of your application’s name.

B) Test the deployed web application in a browser
	- Navigate to a web browser like Chrome or Safari.
	- Paste the application URL and append /message on the end of the URL.
	- Upon successfully accessing that URL, you will see the text Hello World in your browser window.

C) Inspect the EC2 instance created for you
	- Navigate to the EC2 console and inspect the instance that was created for you. The instance has the same name as your application. You can administer and manage this EC2 as if you created it yourself.

D) Cleanup and delete resources
	- To clean up the resources to avoid recurring charges, navigate back to the Elastic Beankstalk console.
	- Select your application.
	- Select the Actions button in the upper-right hand corner.
	- Select Terminate environment.
	- Enter the name of the environment to be deleted.
	- Click the Terminate button.
	- After the application is terminated, you will be brought to the main page for the application.
	- Click on the Actions button in the upper right-hand corner.
	- Select Delete application.
	- Enter the name of your application.
	- Click the Delete button.

